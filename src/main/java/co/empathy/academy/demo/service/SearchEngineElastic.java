package co.empathy.academy.demo.service;

import java.io.IOException;
import java.util.List;

import org.apache.http.HttpEntity;
import org.apache.http.util.EntityUtils;
import org.elasticsearch.client.Request;
import org.elasticsearch.client.Response;
import org.elasticsearch.client.RestClient;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;

import co.empathy.academy.demo.Models.Movie;
import co.empathy.academy.demo.util.JsonConversor;
public class SearchEngineElastic implements SearchEngine{
    @Autowired
    private RestClient client;
    

    public SearchEngineElastic(RestClient client) {
        this.client = client;
    }

    //performs search with the elasticsearch library (without body)
    @Override
    public String search(String query) throws Exception {
        if (query == null) {
            throw new RuntimeException("Query is mandatory");
        }
        Request request = new Request("GET", "/_search");
        request.addParameter("q", query);
        request.addParameter("pretty", "true");
        try {
            Response response = client.performRequest(request);
            HttpEntity entity = response.getEntity();
            String responseString = EntityUtils.toString(entity, "UTF-8");
            return responseString;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    //performs search with the elasticsearch library (with body)
    @Override
    public String search(String index, String Body) throws Exception {
        Request request = new Request("GET", "/" + index + "/_search");
        request.addParameter("pretty", "true");
        request.setJsonEntity(Body);
        try {
            Response response = client.performRequest(request);
            HttpEntity entity = response.getEntity();
            String responseString = EntityUtils.toString(entity, "UTF-8");
            return responseString;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    } 

    //method that checks the status of the database
    @Override
    public String getVersion() throws Exception{
        Request request = new Request("GET", "/");
        request.addParameter("pretty", "true");
        try {
            Response response = client.performRequest(request);
            HttpEntity entity = response.getEntity();
            String responseString = EntityUtils.toString(entity, "UTF-8");
            return responseString;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    //get indexes
    @Override
    public String getIndex() throws Exception {
        Request request = new Request("GET", "/_cat/indices");
        try {
            Response response = client.performRequest(request);
            HttpEntity entity = response.getEntity();
            String responseString = EntityUtils.toString(entity, "UTF-8");
            return responseString;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    //adds an index to the database (without body)
    @Override
    public String putIndex(String index) throws Exception {
        Request request = new Request("PUT", "/" + index);
        request.addParameter("pretty", "true");
        try {
            Response response = client.performRequest(request);
            HttpEntity entity = response.getEntity();
            String responseString = EntityUtils.toString(entity, "UTF-8");
            return responseString;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    //adds an index to the database (with body)
    @Override
    public String putIndex(String index, String Body) throws Exception {
        Request request = new Request("PUT", "/" + index);
        request.addParameter("pretty", "true");
        request.setJsonEntity(Body);
        try {
            Response response = client.performRequest(request);
            HttpEntity entity = response.getEntity();
            String responseString = EntityUtils.toString(entity, "UTF-8");
            return responseString;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    //Post documents in the database with id autogenerated(in an index specified)
    @Override
    public String addDocument(String index, Movie Body) throws Exception {
        Request request = new Request("POST", "/" + index + "/_doc");
        request.addParameter("pretty", "true");
        request.setJsonEntity(JsonConversor.movietoJSON(Body).toString());
        try {
            Response response = client.performRequest(request);
            HttpEntity entity = response.getEntity();
            String responseString = EntityUtils.toString(entity, "UTF-8");
            return responseString;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
    
    //PUT mapping for a index that exists
    @Override
    public void mapping(String index, String mapping) throws IOException {
        Request request = new Request("PUT", "/" + index + "/_mapping");
        request.addParameter("pretty", "true");
        request.setJsonEntity(mapping);
        try {
            Response response = client.performRequest(request);
            HttpEntity entity = response.getEntity();
            String responseString = EntityUtils.toString(entity, "UTF-8");
            System.out.println(responseString);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public String postDocuments(String index, String id, String Body) throws IOException {
        Request request = new Request("POST", "/" + index + "/_doc/" + id);
        request.addParameter("pretty", "true");
        request.setJsonEntity(Body);
        try {
            Response response = client.performRequest(request);
            HttpEntity entity = response.getEntity();
            String responseString = EntityUtils.toString(entity, "UTF-8");
            return responseString;
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public String bulk(List<Movie> movies, String index) throws Exception {
        Request request = new Request("POST", "/" + index + "/_bulk");
        request.addParameter("pretty", "true");
        String json = "";
        for (Movie movie : movies){
            json = json + "{\"index\":{\"_id\":\"" + movie.getId().toString() + "\""
            + "}} \n{\"create\": " + JsonConversor.movietoJSON(movie) + "} \n\n";
        }
        request.setJsonEntity(json);
        try {
            Response response = client.performRequest(request);
            HttpEntity entity = response.getEntity();
            String responseString = EntityUtils.toString(entity, "UTF-8");
            JSONObject jose = new JSONObject(responseString);
            Boolean errors = jose.getBoolean("errors");
            if (errors==false) System.out.println("Va bien");
            else System.out.println("Va mal");
            
            
            return responseString;
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        
    }

    
    
}
